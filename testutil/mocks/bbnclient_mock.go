// Code generated by MockGen. DO NOT EDIT.
// Source: bbnclient/interface.go
//
// Generated by this command:
//
//	mockgen -source=bbnclient/interface.go -package mocks -destination ./testutil/mocks/bbnclient_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIBabylonClient is a mock of IBabylonClient interface.
type MockIBabylonClient struct {
	ctrl     *gomock.Controller
	recorder *MockIBabylonClientMockRecorder
}

// MockIBabylonClientMockRecorder is the mock recorder for MockIBabylonClient.
type MockIBabylonClientMockRecorder struct {
	mock *MockIBabylonClient
}

// NewMockIBabylonClient creates a new mock instance.
func NewMockIBabylonClient(ctrl *gomock.Controller) *MockIBabylonClient {
	mock := &MockIBabylonClient{ctrl: ctrl}
	mock.recorder = &MockIBabylonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBabylonClient) EXPECT() *MockIBabylonClientMockRecorder {
	return m.recorder
}

// QueryAllFpBtcPubKeys mocks base method.
func (m *MockIBabylonClient) QueryAllFpBtcPubKeys(consumerId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllFpBtcPubKeys", consumerId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllFpBtcPubKeys indicates an expected call of QueryAllFpBtcPubKeys.
func (mr *MockIBabylonClientMockRecorder) QueryAllFpBtcPubKeys(consumerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllFpBtcPubKeys", reflect.TypeOf((*MockIBabylonClient)(nil).QueryAllFpBtcPubKeys), consumerId)
}

// QueryEarliestActiveDelBtcHeight mocks base method.
func (m *MockIBabylonClient) QueryEarliestActiveDelBtcHeight(fpPubkeyHexList []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEarliestActiveDelBtcHeight", fpPubkeyHexList)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEarliestActiveDelBtcHeight indicates an expected call of QueryEarliestActiveDelBtcHeight.
func (mr *MockIBabylonClientMockRecorder) QueryEarliestActiveDelBtcHeight(fpPubkeyHexList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEarliestActiveDelBtcHeight", reflect.TypeOf((*MockIBabylonClient)(nil).QueryEarliestActiveDelBtcHeight), fpPubkeyHexList)
}

// QueryFpPower mocks base method.
func (m *MockIBabylonClient) QueryFpPower(fpPubkeyHex string, btcHeight uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFpPower", fpPubkeyHex, btcHeight)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFpPower indicates an expected call of QueryFpPower.
func (mr *MockIBabylonClientMockRecorder) QueryFpPower(fpPubkeyHex, btcHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFpPower", reflect.TypeOf((*MockIBabylonClient)(nil).QueryFpPower), fpPubkeyHex, btcHeight)
}

// QueryMultiFpPower mocks base method.
func (m *MockIBabylonClient) QueryMultiFpPower(fpPubkeyHexList []string, btcHeight uint64) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMultiFpPower", fpPubkeyHexList, btcHeight)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMultiFpPower indicates an expected call of QueryMultiFpPower.
func (mr *MockIBabylonClientMockRecorder) QueryMultiFpPower(fpPubkeyHexList, btcHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMultiFpPower", reflect.TypeOf((*MockIBabylonClient)(nil).QueryMultiFpPower), fpPubkeyHexList, btcHeight)
}
