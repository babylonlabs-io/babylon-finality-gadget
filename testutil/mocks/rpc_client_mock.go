// Code generated by MockGen. DO NOT EDIT.
// Source: proto/finalitygadget_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=proto/finalitygadget_grpc.pb.go -package mocks -destination ./testutil/mocks/rpc_client_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/babylonlabs-io/finality-gadget/proto"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFinalityGadgetClient is a mock of FinalityGadgetClient interface.
type MockFinalityGadgetClient struct {
	ctrl     *gomock.Controller
	recorder *MockFinalityGadgetClientMockRecorder
}

// MockFinalityGadgetClientMockRecorder is the mock recorder for MockFinalityGadgetClient.
type MockFinalityGadgetClientMockRecorder struct {
	mock *MockFinalityGadgetClient
}

// NewMockFinalityGadgetClient creates a new mock instance.
func NewMockFinalityGadgetClient(ctrl *gomock.Controller) *MockFinalityGadgetClient {
	mock := &MockFinalityGadgetClient{ctrl: ctrl}
	mock.recorder = &MockFinalityGadgetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalityGadgetClient) EXPECT() *MockFinalityGadgetClientMockRecorder {
	return m.recorder
}

// QueryBlockRangeBabylonFinalized mocks base method.
func (m *MockFinalityGadgetClient) QueryBlockRangeBabylonFinalized(ctx context.Context, in *proto.QueryBlockRangeBabylonFinalizedRequest, opts ...grpc.CallOption) (*proto.QueryBlockRangeBabylonFinalizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBlockRangeBabylonFinalized", varargs...)
	ret0, _ := ret[0].(*proto.QueryBlockRangeBabylonFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlockRangeBabylonFinalized indicates an expected call of QueryBlockRangeBabylonFinalized.
func (mr *MockFinalityGadgetClientMockRecorder) QueryBlockRangeBabylonFinalized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlockRangeBabylonFinalized", reflect.TypeOf((*MockFinalityGadgetClient)(nil).QueryBlockRangeBabylonFinalized), varargs...)
}

// QueryBtcStakingActivatedTimestamp mocks base method.
func (m *MockFinalityGadgetClient) QueryBtcStakingActivatedTimestamp(ctx context.Context, in *proto.QueryBtcStakingActivatedTimestampRequest, opts ...grpc.CallOption) (*proto.QueryBtcStakingActivatedTimestampResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryBtcStakingActivatedTimestamp", varargs...)
	ret0, _ := ret[0].(*proto.QueryBtcStakingActivatedTimestampResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBtcStakingActivatedTimestamp indicates an expected call of QueryBtcStakingActivatedTimestamp.
func (mr *MockFinalityGadgetClientMockRecorder) QueryBtcStakingActivatedTimestamp(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBtcStakingActivatedTimestamp", reflect.TypeOf((*MockFinalityGadgetClient)(nil).QueryBtcStakingActivatedTimestamp), varargs...)
}

// QueryIsBlockBabylonFinalized mocks base method.
func (m *MockFinalityGadgetClient) QueryIsBlockBabylonFinalized(ctx context.Context, in *proto.QueryIsBlockBabylonFinalizedRequest, opts ...grpc.CallOption) (*proto.QueryIsBlockFinalizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryIsBlockBabylonFinalized", varargs...)
	ret0, _ := ret[0].(*proto.QueryIsBlockFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockBabylonFinalized indicates an expected call of QueryIsBlockBabylonFinalized.
func (mr *MockFinalityGadgetClientMockRecorder) QueryIsBlockBabylonFinalized(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockBabylonFinalized", reflect.TypeOf((*MockFinalityGadgetClient)(nil).QueryIsBlockBabylonFinalized), varargs...)
}

// QueryIsBlockFinalizedByHash mocks base method.
func (m *MockFinalityGadgetClient) QueryIsBlockFinalizedByHash(ctx context.Context, in *proto.QueryIsBlockFinalizedByHashRequest, opts ...grpc.CallOption) (*proto.QueryIsBlockFinalizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryIsBlockFinalizedByHash", varargs...)
	ret0, _ := ret[0].(*proto.QueryIsBlockFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalizedByHash indicates an expected call of QueryIsBlockFinalizedByHash.
func (mr *MockFinalityGadgetClientMockRecorder) QueryIsBlockFinalizedByHash(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalizedByHash", reflect.TypeOf((*MockFinalityGadgetClient)(nil).QueryIsBlockFinalizedByHash), varargs...)
}

// QueryIsBlockFinalizedByHeight mocks base method.
func (m *MockFinalityGadgetClient) QueryIsBlockFinalizedByHeight(ctx context.Context, in *proto.QueryIsBlockFinalizedByHeightRequest, opts ...grpc.CallOption) (*proto.QueryIsBlockFinalizedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryIsBlockFinalizedByHeight", varargs...)
	ret0, _ := ret[0].(*proto.QueryIsBlockFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalizedByHeight indicates an expected call of QueryIsBlockFinalizedByHeight.
func (mr *MockFinalityGadgetClientMockRecorder) QueryIsBlockFinalizedByHeight(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalizedByHeight", reflect.TypeOf((*MockFinalityGadgetClient)(nil).QueryIsBlockFinalizedByHeight), varargs...)
}

// QueryLatestFinalizedBlock mocks base method.
func (m *MockFinalityGadgetClient) QueryLatestFinalizedBlock(ctx context.Context, in *proto.QueryLatestFinalizedBlockRequest, opts ...grpc.CallOption) (*proto.QueryBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryLatestFinalizedBlock", varargs...)
	ret0, _ := ret[0].(*proto.QueryBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestFinalizedBlock indicates an expected call of QueryLatestFinalizedBlock.
func (mr *MockFinalityGadgetClientMockRecorder) QueryLatestFinalizedBlock(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestFinalizedBlock", reflect.TypeOf((*MockFinalityGadgetClient)(nil).QueryLatestFinalizedBlock), varargs...)
}

// MockFinalityGadgetServer is a mock of FinalityGadgetServer interface.
type MockFinalityGadgetServer struct {
	ctrl     *gomock.Controller
	recorder *MockFinalityGadgetServerMockRecorder
}

// MockFinalityGadgetServerMockRecorder is the mock recorder for MockFinalityGadgetServer.
type MockFinalityGadgetServerMockRecorder struct {
	mock *MockFinalityGadgetServer
}

// NewMockFinalityGadgetServer creates a new mock instance.
func NewMockFinalityGadgetServer(ctrl *gomock.Controller) *MockFinalityGadgetServer {
	mock := &MockFinalityGadgetServer{ctrl: ctrl}
	mock.recorder = &MockFinalityGadgetServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalityGadgetServer) EXPECT() *MockFinalityGadgetServerMockRecorder {
	return m.recorder
}

// QueryBlockRangeBabylonFinalized mocks base method.
func (m *MockFinalityGadgetServer) QueryBlockRangeBabylonFinalized(arg0 context.Context, arg1 *proto.QueryBlockRangeBabylonFinalizedRequest) (*proto.QueryBlockRangeBabylonFinalizedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBlockRangeBabylonFinalized", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryBlockRangeBabylonFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBlockRangeBabylonFinalized indicates an expected call of QueryBlockRangeBabylonFinalized.
func (mr *MockFinalityGadgetServerMockRecorder) QueryBlockRangeBabylonFinalized(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBlockRangeBabylonFinalized", reflect.TypeOf((*MockFinalityGadgetServer)(nil).QueryBlockRangeBabylonFinalized), arg0, arg1)
}

// QueryBtcStakingActivatedTimestamp mocks base method.
func (m *MockFinalityGadgetServer) QueryBtcStakingActivatedTimestamp(arg0 context.Context, arg1 *proto.QueryBtcStakingActivatedTimestampRequest) (*proto.QueryBtcStakingActivatedTimestampResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBtcStakingActivatedTimestamp", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryBtcStakingActivatedTimestampResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBtcStakingActivatedTimestamp indicates an expected call of QueryBtcStakingActivatedTimestamp.
func (mr *MockFinalityGadgetServerMockRecorder) QueryBtcStakingActivatedTimestamp(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBtcStakingActivatedTimestamp", reflect.TypeOf((*MockFinalityGadgetServer)(nil).QueryBtcStakingActivatedTimestamp), arg0, arg1)
}

// QueryIsBlockBabylonFinalized mocks base method.
func (m *MockFinalityGadgetServer) QueryIsBlockBabylonFinalized(arg0 context.Context, arg1 *proto.QueryIsBlockBabylonFinalizedRequest) (*proto.QueryIsBlockFinalizedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockBabylonFinalized", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryIsBlockFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockBabylonFinalized indicates an expected call of QueryIsBlockBabylonFinalized.
func (mr *MockFinalityGadgetServerMockRecorder) QueryIsBlockBabylonFinalized(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockBabylonFinalized", reflect.TypeOf((*MockFinalityGadgetServer)(nil).QueryIsBlockBabylonFinalized), arg0, arg1)
}

// QueryIsBlockFinalizedByHash mocks base method.
func (m *MockFinalityGadgetServer) QueryIsBlockFinalizedByHash(arg0 context.Context, arg1 *proto.QueryIsBlockFinalizedByHashRequest) (*proto.QueryIsBlockFinalizedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockFinalizedByHash", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryIsBlockFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalizedByHash indicates an expected call of QueryIsBlockFinalizedByHash.
func (mr *MockFinalityGadgetServerMockRecorder) QueryIsBlockFinalizedByHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalizedByHash", reflect.TypeOf((*MockFinalityGadgetServer)(nil).QueryIsBlockFinalizedByHash), arg0, arg1)
}

// QueryIsBlockFinalizedByHeight mocks base method.
func (m *MockFinalityGadgetServer) QueryIsBlockFinalizedByHeight(arg0 context.Context, arg1 *proto.QueryIsBlockFinalizedByHeightRequest) (*proto.QueryIsBlockFinalizedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryIsBlockFinalizedByHeight", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryIsBlockFinalizedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIsBlockFinalizedByHeight indicates an expected call of QueryIsBlockFinalizedByHeight.
func (mr *MockFinalityGadgetServerMockRecorder) QueryIsBlockFinalizedByHeight(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIsBlockFinalizedByHeight", reflect.TypeOf((*MockFinalityGadgetServer)(nil).QueryIsBlockFinalizedByHeight), arg0, arg1)
}

// QueryLatestFinalizedBlock mocks base method.
func (m *MockFinalityGadgetServer) QueryLatestFinalizedBlock(arg0 context.Context, arg1 *proto.QueryLatestFinalizedBlockRequest) (*proto.QueryBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestFinalizedBlock", arg0, arg1)
	ret0, _ := ret[0].(*proto.QueryBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestFinalizedBlock indicates an expected call of QueryLatestFinalizedBlock.
func (mr *MockFinalityGadgetServerMockRecorder) QueryLatestFinalizedBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestFinalizedBlock", reflect.TypeOf((*MockFinalityGadgetServer)(nil).QueryLatestFinalizedBlock), arg0, arg1)
}

// mustEmbedUnimplementedFinalityGadgetServer mocks base method.
func (m *MockFinalityGadgetServer) mustEmbedUnimplementedFinalityGadgetServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFinalityGadgetServer")
}

// mustEmbedUnimplementedFinalityGadgetServer indicates an expected call of mustEmbedUnimplementedFinalityGadgetServer.
func (mr *MockFinalityGadgetServerMockRecorder) mustEmbedUnimplementedFinalityGadgetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFinalityGadgetServer", reflect.TypeOf((*MockFinalityGadgetServer)(nil).mustEmbedUnimplementedFinalityGadgetServer))
}

// MockUnsafeFinalityGadgetServer is a mock of UnsafeFinalityGadgetServer interface.
type MockUnsafeFinalityGadgetServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFinalityGadgetServerMockRecorder
}

// MockUnsafeFinalityGadgetServerMockRecorder is the mock recorder for MockUnsafeFinalityGadgetServer.
type MockUnsafeFinalityGadgetServerMockRecorder struct {
	mock *MockUnsafeFinalityGadgetServer
}

// NewMockUnsafeFinalityGadgetServer creates a new mock instance.
func NewMockUnsafeFinalityGadgetServer(ctrl *gomock.Controller) *MockUnsafeFinalityGadgetServer {
	mock := &MockUnsafeFinalityGadgetServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFinalityGadgetServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFinalityGadgetServer) EXPECT() *MockUnsafeFinalityGadgetServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFinalityGadgetServer mocks base method.
func (m *MockUnsafeFinalityGadgetServer) mustEmbedUnimplementedFinalityGadgetServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFinalityGadgetServer")
}

// mustEmbedUnimplementedFinalityGadgetServer indicates an expected call of mustEmbedUnimplementedFinalityGadgetServer.
func (mr *MockUnsafeFinalityGadgetServerMockRecorder) mustEmbedUnimplementedFinalityGadgetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFinalityGadgetServer", reflect.TypeOf((*MockUnsafeFinalityGadgetServer)(nil).mustEmbedUnimplementedFinalityGadgetServer))
}
