// Code generated by MockGen. DO NOT EDIT.
// Source: db/interface.go
//
// Generated by this command:
//
//	mockgen -source=db/interface.go -package mocks -destination ./testutil/mocks/db_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/babylonlabs-io/finality-gadget/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIDatabaseHandler is a mock of IDatabaseHandler interface.
type MockIDatabaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseHandlerMockRecorder
}

// MockIDatabaseHandlerMockRecorder is the mock recorder for MockIDatabaseHandler.
type MockIDatabaseHandlerMockRecorder struct {
	mock *MockIDatabaseHandler
}

// NewMockIDatabaseHandler creates a new mock instance.
func NewMockIDatabaseHandler(ctrl *gomock.Controller) *MockIDatabaseHandler {
	mock := &MockIDatabaseHandler{ctrl: ctrl}
	mock.recorder = &MockIDatabaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabaseHandler) EXPECT() *MockIDatabaseHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIDatabaseHandler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIDatabaseHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDatabaseHandler)(nil).Close))
}

// CreateInitialSchema mocks base method.
func (m *MockIDatabaseHandler) CreateInitialSchema() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialSchema")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInitialSchema indicates an expected call of CreateInitialSchema.
func (mr *MockIDatabaseHandlerMockRecorder) CreateInitialSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialSchema", reflect.TypeOf((*MockIDatabaseHandler)(nil).CreateInitialSchema))
}

// DeleteDB mocks base method.
func (m *MockIDatabaseHandler) DeleteDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDB indicates an expected call of DeleteDB.
func (mr *MockIDatabaseHandlerMockRecorder) DeleteDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDB", reflect.TypeOf((*MockIDatabaseHandler)(nil).DeleteDB))
}

// GetBlockByHash mocks base method.
func (m *MockIDatabaseHandler) GetBlockByHash(hash string) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockIDatabaseHandlerMockRecorder) GetBlockByHash(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockIDatabaseHandler)(nil).GetBlockByHash), hash)
}

// GetBlockByHeight mocks base method.
func (m *MockIDatabaseHandler) GetBlockByHeight(height uint64) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", height)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockIDatabaseHandlerMockRecorder) GetBlockByHeight(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockIDatabaseHandler)(nil).GetBlockByHeight), height)
}

// GetBlockStatusByHash mocks base method.
func (m *MockIDatabaseHandler) GetBlockStatusByHash(hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockStatusByHash", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockStatusByHash indicates an expected call of GetBlockStatusByHash.
func (mr *MockIDatabaseHandlerMockRecorder) GetBlockStatusByHash(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockStatusByHash", reflect.TypeOf((*MockIDatabaseHandler)(nil).GetBlockStatusByHash), hash)
}

// GetBlockStatusByHeight mocks base method.
func (m *MockIDatabaseHandler) GetBlockStatusByHeight(height uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockStatusByHeight", height)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockStatusByHeight indicates an expected call of GetBlockStatusByHeight.
func (mr *MockIDatabaseHandlerMockRecorder) GetBlockStatusByHeight(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockStatusByHeight", reflect.TypeOf((*MockIDatabaseHandler)(nil).GetBlockStatusByHeight), height)
}

// GetLatestBlock mocks base method.
func (m *MockIDatabaseHandler) GetLatestBlock() (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockIDatabaseHandlerMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockIDatabaseHandler)(nil).GetLatestBlock))
}

// InsertBlock mocks base method.
func (m *MockIDatabaseHandler) InsertBlock(block *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlock indicates an expected call of InsertBlock.
func (mr *MockIDatabaseHandlerMockRecorder) InsertBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlock", reflect.TypeOf((*MockIDatabaseHandler)(nil).InsertBlock), block)
}
